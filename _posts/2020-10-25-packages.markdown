---
layout: post
title:  "Managing Dependencies in Python"
date:   2020-10-24 10:30:57 -0400
categories: jekyll update
---

Software usually has a modular design. The individual features or tools are independent, separable, and can be added or removed in different combinations. This means they can also be improved and updated on independent project-specific timelines.

The draw-back is that this modular design creates many *dependencies* between features. A complicated Python program might require a large variety of imported modules and the code would be dependent on each version used.

This creates the need for package management software:

## 1. virtualenv and Anaconda

The default python package management tool is virtualenv (). It creates a virtual environment that 


Anaconda () is both a (1) **distribution** of Python and a (2) **package management tool**. It includes the Python . For first-time users, it is a con

It also provides a more robust virtual environment 

conda create --name myenv

## 2. docker


